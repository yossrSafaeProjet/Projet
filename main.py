# Avec la syntaxe from ... import ... on import un seul  objet
import Scrapping2
from Processor import Processor
from ReadAndWriteFile import ReadAndWriteFile
from DataBases import DataBases
from Algorithme import Algorithme
from Scrapping2 import Scrapping2

#from alerter import Alerter

# Avec la syntaxe import .... on import tout le package
import datetime

# Avec la syntaxe from ... import * on importe tout  üö®üö® a ne pas utiliser
# risque de conflit avec un autre objet (fonction, class, variable)
# qui aurait le m√™me nom
# ici pas de risque : seulement une fonction nomm√©e time_exec
#from time_exec import *


def main():
    starting_time = datetime.datetime.now()
    url = "https://www.spin-off.fr/calendrier_des_series.html"
    #R√©cup√©rer les donn√©es relatives √† la difuution d'episode 
    processor_instance = Processor(limit=40)
    serie_info = processor_instance.recuprer(url)
    for serie in serie_info:
        print(serie) 
    print(f"************************* FILES***********************")
    read_write_file_instance=ReadAndWriteFile()
    #Enregistrer les donn√©es r√©cup√©r√©es dans un ficher csv
    read_file=read_write_file_instance.Enregistrer(serie_info)
    #Lire les donn√©es enregistr√©es dans un ficher csv
    write_file=read_write_file_instance.lire_fichier_csv("episodes.csv")
    for episode in write_file:
        print(episode)
    print(f"*************************SQL***********************")
    #SQL
    #Ins√©rer les donn√©es de la question Scrapping dans avec sqlite dans la base de donn√©e
    data_Base_instance=DataBases()
    data_Base_instance.inserer_data_Sqlite(serie_info)

    #Ins√©rer les donn√©es de la question Scrapping dans avec Scalingo 
    data_Base_instance.inserer_data_Squalingo(serie_info)
    print(f"*************************ALGORITHME***********************")
    #ALGORITHMES
    #Calculer le nombre d'√©pisodes diffus√©s par chaque chaine de t√©livision en Octobre
    algorithme_instance=Algorithme()
    algorithme_instance.nbr_episode_par_categorie("episode","chaine_Diffusion")
    #Calculer le nombre d'√©pisodes diffus√©s par chaque pays n en Octobre
    algorithme_instance.nbr_episode_par_categorie("episode","pays_Origine")
    #Indiquer les 10 mots les plus pr√©sents dans les nom des s√©ries
    noms_series = algorithme_instance.extraire_noms_series()
    mots_plus_presents_10 = algorithme_instance.mots_plus_presents(noms_series)
    for mot in mots_plus_presents_10:
        print(f"Mot : {mot[0]}")

    print(f"*************************SCRAPPING2***********************")
    #Le deuxi√®me scrapping 
    scrapping_instance=Scrapping2() 
    #R√©cup√©ration de la dur√©e de l'√©pisode √† partir de l'url r√©cup√©r√© 
    duration_list=scrapping_instance.recupererDuration("tvN",serie_info)
    #Stocker les donn√©es de la dur√©e dans une base de donn√©e sqlite 
    data_Base_instance.inserer_Sql_duration_sqlite(duration_list)
    #Stocker les donn√©es de la dur√©e dans une base de donn√©e squalingo
    data_Base_instance.inserer_Sql_duration_scalingo(duration_list)
    print(f"*************************ALGORITHME2***********************")
    #ALGORITHME 2
    #R√©cup√©rer la chaine TV QUI DIFFUSE lES EPISODES pendant le plus grand nombre de jours cons√©cutifs sur le mois d'OCTOBRE 
    algorithme_instance.recupereChaineDeDiffusion(serie_info) 


if __name__ == "__main__":
    main()
